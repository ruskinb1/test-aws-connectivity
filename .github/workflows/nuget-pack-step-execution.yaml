name: Conditionally Run Steps Based on .nuspec File (Windows)

on:
  workflow_dispatch:

env:
  DEV_OUTPUT_PATH: '\\cisclnt-0584.int.thomsonreuters.com\tax_planner$'
  SOURCE_PATH: ${{ github.workspace }}/WincsiRelease/UTP
  PACKAGES_DIR: ${{ github.workspace }}/src/packages
  ARTIFACTORY_UPLOAD_PATH: nuget-local/ThomsonReuters/Desktop/CSSuite/PlannerCS/
  PRIOR_YEAR_BRANCH: '4277608/Consume-Latest-Shared-NuGet-from-JFrog-In-States'
  YEAR: 'Y24'
  PRIOR_YEAR: 'Y23'
  JF_URL: 'https://tr1.jfrog.io/artifactory/'

jobs:
  check-and-execute:
    name: Check for `.nuspec` File and Execute Steps (Windows)
    runs-on: windows-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Check for `.nuspec` File and Set Environment Variable
      - name: Check for .nuspec File
        shell: pwsh
        id: check-nuspec
        run: |
          # Search for *.nuspec files in all directories recursively
          $nuspecFiles = Get-ChildItem -Path . -Filter "*.nuspec" -Recurse
            
          if ($nuspecFiles) {
              Write-Host "Found nuspec files!"
              echo "NUSPEC_FOUND=true" >> $Env:GITHUB_ENV
          } else {
              Write-Host "No nuspec files found."
              echo "NUSPEC_FOUND=false" >> $Env:GITHUB_ENV
          }

      # Step 3: Run If `.nuspec` File Exists
      - name: Execute If .nuspec File Exists
        if: env.NUSPEC_FOUND == 'true'
        shell: pwsh
        run: |
          Write-Host "Executing because .nuspec file exists in the repository."
          Get-ChildItem -Path . -Filter "*.nuspec" -Recurse

      # Step 4: Optional: Run When `.nuspec` File Does Not Exist
      - name: Execute If .nuspec File Does Not Exist
        if: env.NUSPEC_FOUND == 'false'
        shell: pwsh
        run: |
          Write-Host "No .nuspec file found. Skipping NuGet-specific processing."

      - name: Check for something important
        run: |
          # Your script or command that performs a check
          # If a condition is met that warrants a warning:
          echo "::warning file=your_file.js,line=10,col=5,endColumn=15,title=Important Check::This is a warning message about a potential issue."
      - name: Setting Env Vars for Certificate signing
        id: Certificate_Signing_Variable_and_YEAR
        run: |
          Write-Output "This run was triggered by a `"$env:GITHUB_REF`" event."
          Write-Output "Setting the Certificate signing if not passed as an input"
          if ($env:GITHUB_REF -eq "refs/head/main") {
            Write-Output "Setting the certificate to dev one" 
            "CERTIFICATE_NAME=TRDevDynamic" >> $env:GITHUB_ENV
            "$DEV_OUTPUT_FOLDER_YEAR=$env:YEAR" >> $env:GITHUB_ENV
            } 
          elseif ($env:GITHUB_REF -eq "refs/head/$env:PRIOR_YEAR_BRANCH") {
            Write-Output "Setting the certificate to prod one"
            "CERTIFICATE_NAME=TRProdDynamic" >> $env:GITHUB_ENV
            "DEV_OUTPUT_FOLDER_YEAR=$env:PRIOR_YEAR" >> $env:GITHUB_ENV
            }
